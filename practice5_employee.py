{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0c4af2a3",
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "attempted relative import with no known parent package",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtyping\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Dict\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mexception\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m NoSuchPositionError\n\u001b[0;32m      5\u001b[0m POSITIONS: Dict[\u001b[38;5;28mstr\u001b[39m, \u001b[38;5;28mint\u001b[39m] \u001b[38;5;241m=\u001b[39m {\n\u001b[0;32m      6\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCEO\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0\u001b[39m,\n\u001b[0;32m      7\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmanager\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m1\u001b[39m,\n\u001b[0;32m      8\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdeveloper\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m2\u001b[39m,\n\u001b[0;32m      9\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtester\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m3\u001b[39m,\n\u001b[0;32m     10\u001b[0m }\n\u001b[0;32m     13\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_position_level\u001b[39m(position_name: \u001b[38;5;28mstr\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mint\u001b[39m:\n",
      "\u001b[1;31mImportError\u001b[0m: attempted relative import with no known parent package"
     ]
    }
   ],
   "source": [
    "from typing import Dict\n",
    "\n",
    "from .exception import NoSuchPositionError\n",
    "\n",
    "POSITIONS: Dict[str, int] = {\n",
    "    'CEO': 0,\n",
    "    'manager': 1,\n",
    "    'developer': 2,\n",
    "    'tester': 3,\n",
    "}\n",
    "\n",
    "\n",
    "def get_position_level(position_name: str) -> int:\n",
    "    \"\"\"\n",
    "    Функция возвращает уровень позиции по ее названию. \n",
    "    Если должности нет в базе поднимается исключение `NoSuchPositionError(position_name)`\n",
    "    \"\"\"\n",
    "    try:\n",
    "        return POSITIONS[position_name]\n",
    "    except KeyError as exp:\n",
    "        raise NoSuchPositionError(position_name) from exp\n",
    "\n",
    "\n",
    "class Employee:\n",
    "    \"\"\"\n",
    "    Класс - сотрудник\n",
    "\n",
    "    Возможности:\n",
    "    1. Реализована возможность сравнения двух сотрудников в зависимости от занимаемой должности - метод __eq__\n",
    "    2. Возможность получить зарплату через метод get_salary\n",
    "    \"\"\"\n",
    "    name: str\n",
    "    position: str\n",
    "    _salary: int\n",
    "\n",
    "    def __init__(self, name: str, position: str, salary: int):\n",
    "        \"\"\"\n",
    "        Задача: реализовать конструктор класса, чтобы все тесты проходили\n",
    "        \"\"\"\n",
    "\n",
    "        self.name = name\n",
    "        self.position = position\n",
    "        self._salary = salary\n",
    "\n",
    "    def get_salary(self) -> int:\n",
    "        \"\"\"\n",
    "        Метод возвращает зарплату сотрудника.\n",
    "        \"\"\"\n",
    "        return self._salary\n",
    "\n",
    "    def __eq__(self, other: object) -> bool:\n",
    "        \"\"\"\n",
    "        Задача: реализовать метод сравнение двух сотрудников, чтобы все тесты проходили.\n",
    "\n",
    "        Сравнение происходит по уровню позиции см. `get_position_level`.\n",
    "        Если что-то идет не так - бросаются исключения. Смотрим что происходит в тестах.\n",
    "        \"\"\"\n",
    "        if not isinstance(other, Employee):\n",
    "            return False\n",
    "\n",
    "        self_level = get_position_level(self.position)\n",
    "        other_level = get_position_level(other.position)\n",
    "\n",
    "        return self_level == other_level\n",
    "\n",
    "    def __str__(self):\n",
    "        \"\"\"\n",
    "        Задача: реализовать строковое представление объекта.\n",
    "        Пример вывода: 'name: Ivan position manager'\n",
    "        \"\"\"\n",
    "        return f\"name: {self.name} position {self.position}\"\n",
    "\n",
    "    def __hash__(self):\n",
    "        return id(self)\n",
    "\n",
    "\n",
    "class Developer(Employee):\n",
    "    \"\"\"\n",
    "    Сотрудник - разработчик\n",
    "    \"\"\"\n",
    "\n",
    "    language: str\n",
    "    position: str = 'developer'\n",
    "\n",
    "    def __init__(self, name: str, salary: int, language: str):\n",
    "        \"\"\"\n",
    "        Задача: реализовать конструктор класса, используя конструктор родителя\n",
    "        \"\"\"\n",
    "\n",
    "        super().__init__(name, self.position, salary)\n",
    "        self.language = language\n",
    "\n",
    "\n",
    "class Manager(Employee):\n",
    "    \"\"\"\n",
    "    Сотрудник - менеджер\n",
    "    \"\"\"\n",
    "\n",
    "    position: str = 'manager'\n",
    "\n",
    "    def __init__(self, name: str, salary: int):\n",
    "        \"\"\"\n",
    "        Задача: реализовать конструктор класса, используя конструктор родителя\n",
    "        \"\"\"\n",
    "\n",
    "        super().__init__(name, self.position, salary)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
