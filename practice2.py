{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "be168b0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Iterable\n",
    "\n",
    "UNCULTURED_WORDS = ('kotleta', 'pirog')\n",
    "\n",
    "\n",
    "def greet_user(name: str) -> str:\n",
    "    \"\"\"\n",
    "    Генерирует приветственную фразу.\n",
    "    Приветствие не может состоять только из одного имени пользователя.\n",
    "\n",
    "    :param name: имя пользователя\n",
    "    :return: приветствие\n",
    "    \"\"\"\n",
    "\n",
    "    if len(name) > 1:\n",
    "        greeting = f\"Привет, {name}!\"\n",
    "    else:\n",
    "        greeting = \"Привет!\"\n",
    "\n",
    "    return greeting\n",
    "\n",
    "\n",
    "def get_amount() -> float:\n",
    "    \"\"\"\n",
    "    Генерируем случайную сумму на счете.\n",
    "\n",
    "    Сумма:\n",
    "    - в диапазоне от 100 до 1000000\n",
    "    - float\n",
    "    - не больше 2-х знаков после запятой\n",
    "\n",
    "    :return: случайную сумму на счете\n",
    "    \"\"\"\n",
    "\n",
    "    import random\n",
    "\n",
    "    amount = round(random.uniform(100, 1000000), 2)\n",
    "    return amount\n",
    "\n",
    "\n",
    "def is_phone_correct(phone_number: str) -> bool:\n",
    "    \"\"\"\n",
    "    Функция проверяет, что номер телефона соответствует следующему формату:\n",
    "    +7xxxxxxxxxx, где x - цифра от 0 до 9\n",
    "\n",
    "    :param phone_number: предполагаемый номер телефона\n",
    "    :return: буленовское значение - bool: True - если номер корректный,\n",
    "                                          False - если номер некорректный\n",
    "    \"\"\"\n",
    "\n",
    "    if phone_number.startswith(\"+7\") and len(phone_number) == 12 and phone_number[1:].isdigit():\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "\n",
    "def is_amount_correct(current_amount: float, transfer_amount: float) -> bool:\n",
    "    \"\"\"\n",
    "    Проверяет возможность осуществления перевода.\n",
    "    Перевод возможен если выполняется условие:\n",
    "    - текущий счет (current_amount) больше или равен сумме перевода (transfer_amount)\n",
    "\n",
    "    :param current_amount: текущий счет\n",
    "    :param transfer_amount: сумма перевода\n",
    "    :return: буленовское значение - bool: True - если перевод возможен,\n",
    "                                          False - если денег недостаточно\n",
    "    \"\"\"\n",
    "\n",
    "    if current_amount >= transfer_amount:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "\n",
    "def moderate_text(text: str, uncultured_words: Iterable[str]) -> str:\n",
    "    \"\"\"\n",
    "    Модерирует текст по следующим правилам.\n",
    "\n",
    "    Требования к тексту:\n",
    "    - Первая буква заглавная, остальные буквы только в нижнем регистре\n",
    "    - отсутствую лишние пробелы\n",
    "    - фильтруются 'опасные' символы: \" ' (двойные и одинарные кавычки)\n",
    "    - слова, перечисленные в переменной uncultured_words заменяются на аналогичное количество знаков #\n",
    "\n",
    "    :param text: исходный текст\n",
    "    :param uncultured_words: список запрещенных слов\n",
    "    :return: текст, соответствующий правилам\n",
    "    \"\"\"\n",
    "\n",
    "    filtered_text = text.lower().strip().replace('\"', '').replace(\"'\", '')\n",
    "\n",
    "    for word in uncultured_words:\n",
    "        filtered_text = filtered_text.replace(word, '#' * len(word))\n",
    "\n",
    "    moderated_text = filtered_text.capitalize()\n",
    "    return moderated_text\n",
    "\n",
    "\n",
    "def create_request_for_loan(user_info: str) -> str:\n",
    "    \"\"\"\n",
    "    Генерирует заявку на кредит на основе входящей строки.\n",
    "    Формат входящий строки:\n",
    "    \n",
    "    Иванов,Петр,Сергеевич,01.01.1991,10000\n",
    "    \n",
    "    Что должны вернуть на ее основе:\n",
    "    \n",
    "    Фамилия: Иванов\n",
    "    Имя: Петр\n",
    "    Отчество: Сергеевич\n",
    "    Дата рождения: 01.01.1991\n",
    "    Запрошенная сумма: 10000\n",
    "    \n",
    "    :param user_info: строка с информацией о клиенте\n",
    "    :return: текст кредитной заявки\n",
    "    \"\"\"\n",
    "\n",
    "    user_info_list = user_info.split(',')\n",
    "    last_name = user_info_list[0]\n",
    "    first_name = user_info_list[1]\n",
    "    patronymic = user_info_list[2]\n",
    "    date_of_birth = user_info_list[3]\n",
    "    requested_amount = user_info_list[4]\n",
    "\n",
    "    request = f\"Фамилия: {last_name}\\nИмя: {first_name}\\nОтчество: {patronymic}\\nДата рождения: {date_of_birth}\\nЗапрошенная сумма: {requested_amount}\"\n",
    "\n",
    "    return request"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
